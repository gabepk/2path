<ui:composition template="/WEB-INF/template/Layout-bs.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:fp="http://xmlns.jcp.org/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">

	<ui:define name="title">
		2Path - Search
	</ui:define>

	<ui:define name="li-active-search">
		<li class="active"><a href="Search.xhtml"> <i
				class="fa fa-search"></i> Search
		</a></li>
	</ui:define>

	<ui:define name="body">
		<f:metadata>
			<fp:viewAction id="compoundsViewAction" name="compounds"
				action="#{searchPathwayBean.preRender}" />
		</f:metadata>
		<h:form>
			<div class="row">
				<div class="col-md-4">
					<div class="row" style="margin-top: 25px">
						<p:messages autoUpdate="true" closable="true" />
					</div>
					<h2>
						Search for a pathway
					</h2>
					<p>
						Enter the name of a Compound
					</p>
					<h:panelGroup>
						
						<p:outputLabel value="From" for="searchInput_1"/>
						<p:autoComplete id="searchInput_1" value="#{searchPathwayBean.substract}" 
							completeMethod="#{searchPathwayBean.suggestKeywords}" required="true"
							forceSelection="false" var="key_1" itemLabel="#{key_1}" itemValue="#{key_1}" 
							style="margin-top:20px; margin-bottom:50px" maxResults="10"/>
						<p:watermark for="searchInput_1" value="Enter a substract" id="watermark_1" />
					
						<p:outputLabel value="To" for="searchInput_2"/>
						<p:autoComplete id="searchInput_2" value="#{searchPathwayBean.product}" 
							completeMethod="#{searchPathwayBean.suggestKeywords}" required="true"
							forceSelection="false" var="key_2" itemLabel="#{key_2}" itemValue="#{key_2}" 
							style="margin-top:20px; margin-bottom:50px" maxResults="10"/>
						<p:watermark for="searchInput_2" value="Enter a product" id="watermark_2" />
					
						<p:commandButton class="btn btn-block btn-success" value="Search"
						    for="searchInput_1, searchInput_2" action="#{searchPathwayBean.searchPathwayInOrganism}" 
						    ajax="false" icon="ui-icon-search" update="graphView" />
						
					</h:panelGroup>	
				</div>
				<!-- ===================================================== -->
				<!-- ===================== G R A F O ===================== -->
				<!-- ===================================================== -->
				<div class="col-md-8">
					<style>
					    .link {
						  fill: none;
						  stroke: #666;
						  stroke-width: 1.5px;
						}
						
						#licensing {
						  fill: green;
						}
						
						.link.licensing {
						  stroke: green;
						}
						
						.link.resolved {
						  stroke-dasharray: 0,2 1;
						}
						
						circle {
						  fill: #ccc;
						  stroke: #333;
						  stroke-width: 1.5px;
						}
						
						text {
						  font: 14px sans-serif;
						  pointer-events: none;
						  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
						}
					</style>
					<svg id="graphView"></svg>
					<script src="http://d3js.org/d3.v2.min.js?2.9.3"></script>
					<script>
						var width = 960, height = 500;
						
						var svg = d3.select("svg")
							.attr("width", width).attr("height", height);
						
						var color = d3.scale.category20b();
						
						var force = d3.layout.force()
							    .gravity(.05)
							    .linkDistance(150)
							    .charge(-900)
							    .size([width, height]);
						
						var nodes = {};
						
						d3.json("resources/json/graph.json", function(graph) {
						         
						     graph.links.forEach(function(link) {
							    link.source = nodes[link.source] || (nodes[link.source] = {name : link.source, type : link.type});
								link.target = nodes[link.target] || (nodes[link.target] = {name : link.target, type : link.type});
							 });
						  
				             force.links(graph.links)
				          		.nodes(d3.values(nodes))
								.on("tick", tick)
								.start();
									 
				             svg.append("defs").selectAll("marker").data(
									[ "CATALYSE", "HAS", "MATCHES",
									  "SUBSTRATE_FOR", "PRODUCTOF"]).enter()
									.append("marker").attr("id", function(d) {
										return d;
									}).attr("viewBox", "0 -5 10 10").attr("refX",
											15).attr("refY", -1.5).attr(
											"markerWidth", 15).attr("markerHeight",
											15).attr("orient", "auto").append(
											"path").attr("d", "M0,-2L5,0L0,02");
						  
				              var path = svg.append("g").selectAll("path").data(
									force.links()).enter().append("path").attr(
									"class", function(d) {
										return "link " + d.type;
									}).attr("marker-end", function(d) {
								return "url(#" + d.type + ")";
							  });
				          
					          var circle = svg.append("g").selectAll("circle")
					          				  .data(force.nodes())
					          				  .enter()
					          				  .append("circle")
					          				  .attr("r", 22)
											  .style("fill", color(function(d){return d.type}))
											  .call(force.drag);
					          var text = svg.append("g").selectAll("text")
					          				  .data(force.nodes())
					          				  .enter()
					          				  .append("text")
					          				  .attr("x", 8)
					          				  .attr("y", ".31em")
					          				  .text(function(d) {
													return d.name;
					          				  }
								);
					          
					          function tick() {
					        	  path.attr("d", linkArc);
					        	  circle.attr("transform", transform);
					        	  text.attr("transform", transform);
					        	}
					          
					          function linkArc(d) {
					        	  var dx = d.target.x - d.source.x,
					        	      dy = d.target.y - d.source.y,
					        	      dr = Math.sqrt(dx * dx + dy * dy);
					        	  return "M" + d.source.x + "," + d.source.y + 
					        	  		"A" + dr + "," + dr + " 0 0,1 " + 
					        	  		d.target.x + "," + d.target.y;
					        	}
					          
					          function transform(d) {
					        	  return "translate(" + d.x + "," + d.y + ")";
					        	}
						});
					</script>
				</div>
				<!-- ===================================================== -->
				<!-- ===================================================== -->
				<!-- ===================================================== -->
			</div>
		</h:form>
	</ui:define>
</ui:composition>
