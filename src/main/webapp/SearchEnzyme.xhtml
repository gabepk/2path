<ui:composition template="/WEB-INF/template/Layout-bs.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:fp="http://xmlns.jcp.org/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">

	<ui:define name="title">
		2Path - Search
	</ui:define>

	<ui:define name="li-active-search">
		<li class="active"><a href="Search.xhtml"> <i
				class="fa fa-search"></i> Search
		</a></li>
	</ui:define>

	<ui:define name="body">
		<f:metadata>
			<fp:viewAction id="enzymesViewAction" name="enzymes"
				action="#{searchEnzymeBean.preRender}" />
		</f:metadata>
		<h:form>
			<div class="row">
				<div class="col-md-4">
					<div class="row" style="margin-top: 25px">
						<p:messages autoUpdate="true" closable="true" />
					</div>
					<h2>Search for an enzyme</h2>
					<h:panelGroup>

						<p:outputLabel value="Enzyme" for="searchInput" />
						<p:autoComplete id="searchInput" value="#{searchEnzymeBean.ec}"
							completeMethod="#{searchEnzymeBean.suggestKeywords}"
							required="true" forceSelection="false" var="key"
							itemLabel="#{key}" itemValue="#{key}"
							style="margin-top:20px; margin-bottom:50px" maxResults="10" />
						<p:watermark for="searchInput" value="Enter an EC number"
							id="watermark" />

						<p:commandButton class="btn btn-block btn-success" value="Search"
							for="searchInput"
							action="#{searchEnzymeBean.searchEnzymeInOrganism}" ajax="false"
							icon="ui-icon-search" update="graphView" />

					</h:panelGroup>
				</div>
				<!-- ===================================================== -->
				<!-- ===================== G R A F O ===================== -->
				<!-- ===================================================== -->
			<!-- <div class="col-md-8">
					<style>
						.links line {
							stroke: #999;
							stroke-opacity: 0.6;
						}
						
						.nodes circle {
							stroke: #fff;
							stroke-width: 1.5px;
						}
						</style>
					<svg id="graphView" width="900" height="450"></svg>
					<script src="https://d3js.org/d3.v4.min.js"></script>
					<script>
						var svg = d3.select("svg"), width = +svg.attr("width"), height = +svg
								.attr("height");

						var color = d3.scaleOrdinal(d3.schemeCategory20);

						var simulation = d3.forceSimulation().force("link",
								d3.forceLink().id(function(d) {
									return d.id;
								})).force("charge", d3.forceManyBody())
								.force("center",
										d3.forceCenter(width / 2, height / 2));

						d3.json("resources/json/graph.json", function(error, graph) {
							if (error)
								throw error;

							var link = svg.append("g").attr("class", "links")
									.selectAll("line").data(graph.links)
									.enter().append("line").attr(
											"stroke-width", function(d) {
												return Math.sqrt(d.value);
											});

							var node = svg.append("g").attr("class", "nodes")
									.selectAll("circle").data(graph.nodes)
									.enter().append("circle").attr("r", 15)
									.attr("fill", function(d) {
										return color(d.group);
									}).call(
											d3.drag().on("start", dragstarted)
													.on("drag", dragged).on(
															"end", dragended));

							node.append("title").text(function(d) {
								return d.id;
							});

							simulation.nodes(graph.nodes).on("tick", ticked);

							simulation.force("link").links(graph.links);

							function ticked() {
								link.attr("x1", function(d) {
									return d.source.x;
								}).attr("y1", function(d) {
									return d.source.y;
								}).attr("x2", function(d) {
									return d.target.x;
								}).attr("y2", function(d) {
									return d.target.y;
								});

								node.attr("cx", function(d) {
									return d.x;
								}).attr("cy", function(d) {
									return d.y;
								});
							}
						});

						function dragstarted(d) {
							if (!d3.event.active)
								simulation.alphaTarget(0.3).restart();
							d.fx = d.x;
							d.fy = d.y;
						}

						function dragged(d) {
							d.fx = d3.event.x;
							d.fy = d3.event.y;
						}

						function dragended(d) {
							if (!d3.event.active)
								simulation.alphaTarget(5);
							d.fx = null;
							d.fy = null;
						}
					</script>
				</div> -->
				
				
				
				
			<div class="col-md-8">
			<style>
				.link {
				  fill: none;
				  stroke: #666;
				  stroke-width: 1.5px;
				}
				
				#licensing {
				  fill: green;
				}
				
				.link.licensing {
				  stroke: green;
				}
				
				.link.resolved {
				  stroke-dasharray: 0,2 1;
				}
				
				circle {
				  fill: #ccc;
				  stroke: #333;
				  stroke-width: 1.5px;
				}
				
				text {
				  font: 10px sans-serif;
				  pointer-events: none;
				  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
				}
				
				</style>
				<script src="//d3js.org/d3.v3.min.js"></script>
				<script>
				
				// http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
				var links = [
				  {source: "Microsoft", target: "Amazon", type: "licensing"},
				  {source: "Microsoft", target: "HTC", type: "licensing"},
				  {source: "Samsung", target: "Apple", type: "suit"},
				  {source: "Motorola", target: "Apple", type: "suit"},
				  {source: "Nokia", target: "Apple", type: "resolved"},
				  {source: "HTC", target: "Apple", type: "suit"},
				  {source: "Kodak", target: "Apple", type: "suit"},
				  {source: "Microsoft", target: "Barnes e Noble", type: "suit"},
				  {source: "Microsoft", target: "Foxconn", type: "suit"},
				  {source: "Oracle", target: "Google", type: "suit"},
				  {source: "Apple", target: "HTC", type: "suit"},
				  {source: "Microsoft", target: "Inventec", type: "suit"},
				  {source: "Samsung", target: "Kodak", type: "resolved"},
				  {source: "LG", target: "Kodak", type: "resolved"},
				  {source: "RIM", target: "Kodak", type: "suit"},
				  {source: "Sony", target: "LG", type: "suit"},
				  {source: "Kodak", target: "LG", type: "resolved"},
				  {source: "Apple", target: "Nokia", type: "resolved"},
				  {source: "Qualcomm", target: "Nokia", type: "resolved"},
				  {source: "Apple", target: "Motorola", type: "suit"},
				  {source: "Microsoft", target: "Motorola", type: "suit"},
				  {source: "Motorola", target: "Microsoft", type: "suit"},
				  {source: "Huawei", target: "ZTE", type: "suit"},
				  {source: "Ericsson", target: "ZTE", type: "suit"},
				  {source: "Kodak", target: "Samsung", type: "resolved"},
				  {source: "Apple", target: "Samsung", type: "suit"},
				  {source: "Kodak", target: "RIM", type: "suit"},
				  {source: "Nokia", target: "Qualcomm", type: "suit"}
				];
				
				var nodes = {};
				
				// Compute the distinct nodes from the links.
				links.forEach(function(link) {
				  link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
				  link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
				});
				
				var width = 960,
				    height = 500;
				
				var force = d3.layout.force()
				    .nodes(d3.values(nodes))
				    .links(links)
				    .size([width, height])
				    .linkDistance(60)
				    .charge(-300)
				    .on("tick", tick)
				    .start();
				
				var svg = d3.select("body").append("svg")
				    .attr("width", width)
				    .attr("height", height);
				
				// Per-type markers, as they don't inherit styles.
				svg.append("defs").selectAll("marker")
				    .data(["suit", "licensing", "resolved"])
				  .enter().append("marker")
				    .attr("id", function(d) { return d; })
				    .attr("viewBox", "0 -5 10 10")
				    .attr("refX", 15)
				    .attr("refY", -1.5)
				    .attr("markerWidth", 6)
				    .attr("markerHeight", 6)
				    .attr("orient", "auto")
				  .append("path")
				    .attr("d", "M0,-5L10,0L0,5");
				
				var path = svg.append("g").selectAll("path")
				    .data(force.links())
				  .enter().append("path")
				    .attr("class", function(d) { return "link " + d.type; })
				    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });
				
				var circle = svg.append("g").selectAll("circle")
				    .data(force.nodes())
				  .enter().append("circle")
				    .attr("r", 6)
				    .call(force.drag);
				
				var text = svg.append("g").selectAll("text")
				    .data(force.nodes())
				  .enter().append("text")
				    .attr("x", 8)
				    .attr("y", ".31em")
				    .text(function(d) { return d.name; });
				
				// Use elliptical arc path segments to doubly-encode directionality.
				function tick() {
				  path.attr("d", linkArc);
				  circle.attr("transform", transform);
				  text.attr("transform", transform);
				}
				
				function linkArc(d) {
				  var dx = d.target.x - d.source.x,
				      dy = d.target.y - d.source.y,
				      dr = Math.sqrt(dx * dx + dy * dy);
				  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
				}
				
				function transform(d) {
				  return "translate(" + d.x + "," + d.y + ")";
				}
				</script>
				</div>
				<!-- ===================================================== -->
				<!-- ===================================================== -->
				<!-- ===================================================== -->
			</div>
		</h:form>
	</ui:define>
</ui:composition>
